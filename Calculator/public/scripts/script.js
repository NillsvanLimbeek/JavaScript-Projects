"use strict";function answer(){if(" + "==numbers[0]||" - "==numbers[0]||" * "==numbers[0]||" / "==numbers[0])bigDisplay.textContent="Error";else{var _answer=eval(numbers.toString().replace(/,/g,"")),round=Math.round(1e3*_answer)/1e3;result.push(round),bigDisplay.textContent=result;var numbersTwo=numbers.toString().replace(/,/g,"");smallDisplay.textContent=numbersTwo+" ="}}function deleteLast(){numbers.pop();bigDisplay.textContent=numbers.toString().replace(/,/g,"")}function clearAll(){numbers.length=[],result.length=[],ans.length=[],bigDisplay.textContent=" ",smallDisplay.textContent=" "}function checkResult(e){var t=result.toString(),n=e.dataset.key,s=e.dataset.key;t.match(/[0-9]/)?s.match(/[0-9]/)?number(e):operator(e):n.match(/[0-9]/)?addNumber(e):addOperator(e)}function number(e){ans.length=0,ans.push(result.toString()),smallDisplay.textContent="Ans = "+ans,result.length=0,numbers.length=0,numbers.push(e.dataset.key),bigDisplay.textContent=numbers}function operator(e){ans.length=0,ans.push(result.toString()),smallDisplay.textContent="Ans = "+result,numbers.length=0,numbers.push(result.toString()),numbers.push(e.dataset.key),result.length=0,bigDisplay.textContent=numbers.toString().replace(/,/g,"")}function addNumber(e){numbers.length<10?(numbers.push(e.dataset.key),bigDisplay.textContent=numbers.toString().replace(/,/g,""),console.log("Smaller")):(bigDisplay.textContent="Size Limit",console.log("Bigger"))}function addOperator(e){" + "==numbers[numbers.length-1]||" - "==numbers[numbers.length-1]||" * "==numbers[numbers.length-1]||" / "==numbers[numbers.length-1]?(numbers.pop(),numbers.push(e.dataset.key)):numbers.push(e.dataset.key),bigDisplay.textContent=numbers.toString().replace(/,/g,"")}var buttons=document.querySelectorAll(".button"),bigDisplay=document.querySelector(".big-letters p"),smallDisplay=document.querySelector(".small-letters p"),numbers=[],result=[],ans=[];buttons.forEach(function(e){e.addEventListener("click",function(t){switch(e.dataset.key){case"9":case"8":case"7":case"6":case"5":case"4":case"3":case"2":case"1":case"0":case".":case" + ":case" - ":case" * ":case" / ":checkResult(e);break;case"X":deleteLast();break;case"CE":clearAll();break;case" = ":answer()}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
